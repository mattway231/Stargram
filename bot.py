import os
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import WebAppInfo, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web
from config import Config
from database import init_db, AsyncSessionLocal, User, Transaction, Report, MapPoint
from integrations import AIService, MapService
from sqlalchemy import select, func

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=Config.TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
map_service = MapService()

async def is_member(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        member = await bot.get_chat_member(Config.GROUP_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        return False

async def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            user.last_active = datetime.utcnow()
            await session.commit()

@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not await is_member(message.from_user.id):
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!")
    
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            user = User(
                id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                is_admin=message.from_user.id in Config.ADMINS,
                is_owner=message.from_user.id == Config.OWNER
            )
            session.add(user)
            await session.commit()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üåü –û—Ç–∫—Ä—ã—Ç—å Stargram", 
            web_app=WebAppInfo(url=f"{Config.WEBAPP_URL}?user_id={message.from_user.id}")
        )
        
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stargram - —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∏—Ä!",
            reply_markup=builder.as_markup()
        )

@dp.message(Command('balance'))
async def cmd_balance(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        
        await message.answer(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
            f"$NOVA: {user.nova}‚ùáÔ∏è\n"
            f"$TIX: {user.tix}‚ú¥Ô∏è"
        )

@dp.message(Command('report'))
async def cmd_report(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not message.reply_to_message:
        return await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
    
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        
        if user.nova < Config.REPORT_COST:
            return await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NOVA. –ù—É–∂–Ω–æ {Config.REPORT_COST}‚ùáÔ∏è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Coze API
        text = message.reply_to_message.text or message.reply_to_message.caption or ""
        is_violation = await AIService.check_violation(text)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∂–∞–ª–æ–±–µ
        report = Report(
            user_id=user.id,
            message_id=message.reply_to_message.message_id,
            message_text=text[:1000],
            status="approved" if is_violation else "rejected"
        )
        session.add(report)
        
        if is_violation:
            user.nova += (Config.REPORT_REWARD - Config.REPORT_COST)
            response_text = (
                f"‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {Config.REPORT_REWARD - Config.REPORT_COST}‚ùáÔ∏è\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.nova}‚ùáÔ∏è"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
            for admin_id in Config.ADMINS:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —Å–æ–æ–±—â–∏–ª –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏:\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {text[:500]}\n"
                        f"–°—Å—ã–ª–∫–∞: https://t.me/c/{str(Config.GROUP_ID).replace('-100', '')}/{message.reply_to_message.message_id}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        else:
            user.nova -= Config.REPORT_COST
            response_text = (
                f"‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: {Config.REPORT_COST}‚ùáÔ∏è\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.nova}‚ùáÔ∏è"
            )
        
        await session.commit()
        await message.answer(response_text)

@dp.message(Command('admin'))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user or not user.is_admin:
            return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await session.scalar(select(func.count(User.id)))
        active_users = await session.scalar(
            select(func.count(User.id)).where(
                User.last_active >= datetime.utcnow() - timedelta(days=1)
            )
        )
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = await session.execute(
            select(Transaction)
            .order_by(Transaction.created_at.desc())
            .limit(5)
        )
        
        text = (
            f"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
        )
        
        for tx in transactions.scalars():
            text += f"{tx.created_at.strftime('%H:%M')} - {tx.type} {tx.amount}{'‚ùáÔ∏è' if tx.currency == 'nova' else '‚ú¥Ô∏è'}\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        builder = InlineKeyboardBuilder()
        if user.is_owner:
            builder.button(text="–í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="admin_give_currency")
            builder.button(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            builder.button(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        
        builder.button(text="–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±", callback_data="admin_reports")
        builder.adjust(2)
        
        await message.answer(text, reply_markup=builder.as_markup())

@dp.message()
async def handle_messages(message: types.Message):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await update_user_activity(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if user:
            # –ù–∞—á–∏—Å–ª—è–µ–º 100 NOVA –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 100 –≤ –¥–µ–Ω—å)
            today_start = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            
            messages_today = await session.scalar(
                select(func.count(Transaction.id)).where(
                    Transaction.user_id == user.id,
                    Transaction.type == "message_reward",
                    Transaction.created_at >= today_start
                )
            )
            
            if messages_today < Config.DAILY_MESSAGE_LIMIT:
                user.nova += Config.DAILY_MESSAGE_REWARD
                
                tx = Transaction(
                    user_id=user.id,
                    amount=Config.DAILY_MESSAGE_REWARD,
                    currency="nova",
                    type="message_reward"
                )
                session.add(tx)
                await session.commit()

async def start_web_app():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    app.add_routes([
        web.get('/api/user', handle_get_user),
        web.post('/api/report', handle_report),
        web.post('/api/exchange', handle_exchange),
        web.post('/api/gift', handle_gift),
        web.get('/api/map/points', handle_map_points),
        web.post('/api/map/collect', handle_collect_point),
        web.get('/api/admin/reports', handle_admin_reports),
        web.post('/api/admin/broadcast', handle_admin_broadcast)
    ])
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()

async def handle_get_user(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = request.query.get('user_id')
    if not user_id:
        return web.json_response({'error': 'User ID is required'}, status=400)
    
    async with AsyncSessionLocal() as session:
        user = await session.get(User, int(user_id))
        if not user:
            return web.json_response({'error': 'User not found'}, status=404)
        
        return web.json_response({
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'nova': user.nova,
            'tix': user.tix,
            'is_admin': user.is_admin,
            'is_owner': user.is_owner
        })

async def handle_map_points(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ"""
    user_id = request.query.get('user_id')
    lat = request.query.get('lat')
    lon = request.query.get('lon')
    
    if not all([user_id, lat, lon]):
        return web.json_response({'error': 'Missing parameters'}, status=400)
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫
        points = await map_service.generate_points(int(user_id), float(lat), float(lon))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        async with AsyncSessionLocal() as session:
            active_points = await session.execute(
                select(MapPoint)
                .where(
                    MapPoint.user_id == int(user_id),
                    MapPoint.collected == False
                )
            )
            
            return web.json_response([
                {
                    'id': p.id,
                    'lat': p.lat,
                    'lon': p.lon,
                    'address': p.address,
                    'reward': p.reward
                }
                for p in active_points.scalars()
            ])
            
    except Exception as e:
        return web.json_response({'error': str(e)}, status=500)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    await init_db()
    await start_web_app()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
