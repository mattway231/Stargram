import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-4641203188"))  # –í–∞—à ID –≥—Ä—É–ø–ø—ã
ADMIN_ID = int(os.getenv("ADMIN_ID", "815270560"))  # –í–∞—à ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

async def on_startup(dp):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(dp):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.send_message(ADMIN_ID, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def health_check():
    try:
        await bot.get_me()
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: OK")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        await restart_bot()

async def restart_bot():
    logger.warning("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.storage.close()
    await bot.session.close()
    asyncio.create_task(start_bot())

async def start_bot():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        await asyncio.sleep(10)
        await restart_bot()

async def web_server():
    app = web.Application()
    app.router.add_get('/', lambda r: web.Response(text="Stargram Bot is alive"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    return runner

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(GROUP_ID, message.from_user.id)
        if chat_member.status in ['member', 'administrator', 'creator']:
            await message.reply(
                "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "üåü –û—Ç–∫—Ä—ã—Ç—å Stargram",
                        web_app=types.WebAppInfo(url="https://–≤–∞—à-–Ω–∏–∫.github.io/Stargram/")
                    )
                )
            )
        else:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.reply("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏")

async def main():
    runner = await web_server()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(health_check, 'interval', minutes=3)
    scheduler.start()
    
    try:
        await on_startup(dp)
        await start_bot()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        scheduler.shutdown()
        await on_shutdown(dp)
        await runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
