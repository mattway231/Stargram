import os
import logging
from telegram import Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-4641203188"))  # –í–∞—à ID –≥—Ä—É–ø–ø—ã —Å –º–∏–Ω—É—Å–æ–º
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-service.onrender.com
PORT = int(os.getenv("PORT", 10000))

async def start(update: Update, context: CallbackContext):
    try:
        user = update.message.from_user
        logger.info(f"User {user.id} started the bot")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
        try:
            chat_member = await context.bot.get_chat_member(GROUP_ID, user.id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã!")
                return
        except TelegramError as e:
            logger.error(f"Group check error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
            return

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        await update.message.reply_text(
            "üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    "üåü –û—Ç–∫—Ä—ã—Ç—å Stargram",
                    web_app=WebAppInfo(url="https://–≤–∞—à-–Ω–∏–∫.github.io/Stargram/")
                )
            ]])
        )

    except Exception as e:
        logger.error(f"Error in /start: {e}")
        await update.message.reply_text("üöß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    try:
        app = Application.builder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))

        # Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
            secret_token=os.getenv("WEBHOOK_SECRET"),
            cert=None,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.critical(f"Bot failed: {e}")

if __name__ == "__main__":
    main()
