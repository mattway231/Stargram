import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "-10012345678"))  # –í–∞—à ID –≥—Ä—É–ø–ø—ã

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        member = await bot.get_chat_member(GROUP_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await message.reply(
                "‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "üåü –û—Ç–∫—Ä—ã—Ç—å Stargram",
                        web_app=types.WebAppInfo(url="https://–≤–∞—à-–Ω–∏–∫.github.io/Stargram/")
                    )
                )
            )
        else:
            await message.reply("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    executor.start_polling(dp, skip_updates=True)
